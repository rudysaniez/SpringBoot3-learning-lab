
logging:
  level:
    root: INFO

server.port: 8080

management:
  endpoints:
    web:
      exposure:
        include: info,health
      base-path: /management
  endpoint:
    health:
      show-details: always
      cache:
        time-to-live: 10000ms
    info:
      cache:
        time-to-live: 10000ms

springdoc:
  api-docs:
    path: /openapi/v3/api-docs
  swagger-ui:
    path: /openapi/swagger-ui.html
  paths-to-match: /**
  packages-to-scan: com.springboot.learning.api.controller

opensearch:
  uris: ${OPENSEARCH_URI}
  username: ${OPENSEARCH_USERNAME}
  password: ${OPENSEARCH_PASSWORD}

spring:
  jackson:
    deserialization:
      accept-single-value-as-array: true
    serialization:
      write-dates-as-timestamps: false
    generator:
      write-numbers-as-strings: false
    default-property-inclusion: NON_NULL
    date-format: yyyy-MM-dd'T'HH:mm:ssZ

  application:
    name: pro-attribute-dictionary-api

  threads:
    virtual:
      enabled: false

  security:
    oauth2:
      resource-server:
        jwt:
          issuer-uri: ${RESOURCE_SERVER_URI}
          jwk-set-uri: ${RESOURCE_SERVER_JWK_URI}
          jws-algorithms: ${RESOURCE_SERVER_JWS_ALGORITHMS}

  cloud:
    stream:
      default-binder: kafka

      bindings:
        attributeDictionarySyncEventConsume-out-0:
          destination: adeo-dev-europe-west1-APP-ARBOLPIM-BM-ES-P1-C1-BONSAI-DICTIONARY-ATTRIBUTE-SYNC
          content-type: application/*+avro

          producer:
            use-native-encoding: true

      kafka:
        binder:
          brokers: ${KAFKA_BROKER}
          auto-create-topics: true
          auto-add-partitions: true
          configuration:
            '[request.timeout.ms]': 60000
            '[key.serializer]': io.confluent.kafka.serializers.KafkaAvroSerializer
            '[value.serializer]': io.confluent.kafka.serializers.KafkaAvroSerializer
            '[key.deserializer]': io.confluent.kafka.serializers.KafkaAvroDeserializer
            '[value.deserializer]': io.confluent.kafka.serializers.KafkaAvroDeserializer
            '[specific.avro.reader]': true
          consumer-properties:
            '[key.deserializer]': io.confluent.kafka.serializers.KafkaAvroDeserializer
            '[value.deserializer]': io.confluent.kafka.serializers.KafkaAvroDeserializer
            '[schema.registry.url]': ${SCHEMA_REGISTRY_URI}
            '[specific.avro.reader]': true
            '[max.poll.records]': 50
            '[fetch.max.wait.ms]': 400
            '[fetch.min.bytes]': 50000
          producer-properties:
            '[key.serializer]': io.confluent.kafka.serializers.KafkaAvroSerializer
            '[value.serializer]': io.confluent.kafka.serializers.KafkaAvroSerializer
            '[schema.registry.url]': ${SCHEMA_REGISTRY_URI}

app:
  eureka-server: ${EUREKA_SERVER}

eureka:
  client:
    service-url:
      defaultZone: http://${app.eureka-server}:8761/eureka/
    initial-instance-info-replication-interval-seconds: 5
    registry-fetch-interval-seconds: 5
  instance:
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 5

api:
  pagination:
    page: 0
    size: 20

service.version: v1

application:
  opensearch:
    indices:
      attributes-dictionary-name: attributes_dictionary_v1
